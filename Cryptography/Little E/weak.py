from Crypto.Util.number import long_to_bytes, inverse
from sympy import factorint

# Given values
n = 78104679979099720183458868713516134177507404180082919981145408927998014077165657913225488752128835116668429761426378565117722556588226766399530815386532863126777974325601567129325329619105829730686490502751150959335214359978333751875237992216551041376553919157544421948363800834990561705719250054399091771901
e = 3
c = 21244724524718125466407825409723236527104231368588167804585558775555255717197440952381947393925244893894535316554889372674077040932944629744150504577300935885728148779417865081956460555204357733

# Factorize n to find p and q
factors = factorint(n)
p, q = list(factors.keys())

# Compute Ï†(n)
phi_n = (p - 1) * (q - 1)

# Compute the private key d
d = inverse(e, phi_n)

# Decrypt the ciphertext
m = pow(c, d, n)
flag = long_to_bytes(m)

print(flag.decode())